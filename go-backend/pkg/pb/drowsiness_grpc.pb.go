// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: drowsiness.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DrowsinessDetection_DetectDrowsiness_FullMethodName       = "/drowsiness.DrowsinessDetection/DetectDrowsiness"
	DrowsinessDetection_DetectDrowsinessStream_FullMethodName = "/drowsiness.DrowsinessDetection/DetectDrowsinessStream"
	DrowsinessDetection_Health_FullMethodName                 = "/drowsiness.DrowsinessDetection/Health"
)

// DrowsinessDetectionClient is the client API for DrowsinessDetection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrowsinessDetectionClient interface {
	// Обработка одного кадра
	DetectDrowsiness(ctx context.Context, in *VideoFrame, opts ...grpc.CallOption) (*DetectionResult, error)
	// Потоковая обработка
	DetectDrowsinessStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VideoFrame, DetectionResult], error)
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthStatus, error)
}

type drowsinessDetectionClient struct {
	cc grpc.ClientConnInterface
}

func NewDrowsinessDetectionClient(cc grpc.ClientConnInterface) DrowsinessDetectionClient {
	return &drowsinessDetectionClient{cc}
}

func (c *drowsinessDetectionClient) DetectDrowsiness(ctx context.Context, in *VideoFrame, opts ...grpc.CallOption) (*DetectionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectionResult)
	err := c.cc.Invoke(ctx, DrowsinessDetection_DetectDrowsiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drowsinessDetectionClient) DetectDrowsinessStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[VideoFrame, DetectionResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DrowsinessDetection_ServiceDesc.Streams[0], DrowsinessDetection_DetectDrowsinessStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoFrame, DetectionResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DrowsinessDetection_DetectDrowsinessStreamClient = grpc.BidiStreamingClient[VideoFrame, DetectionResult]

func (c *drowsinessDetectionClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, DrowsinessDetection_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrowsinessDetectionServer is the server API for DrowsinessDetection service.
// All implementations must embed UnimplementedDrowsinessDetectionServer
// for forward compatibility.
type DrowsinessDetectionServer interface {
	// Обработка одного кадра
	DetectDrowsiness(context.Context, *VideoFrame) (*DetectionResult, error)
	// Потоковая обработка
	DetectDrowsinessStream(grpc.BidiStreamingServer[VideoFrame, DetectionResult]) error
	Health(context.Context, *Empty) (*HealthStatus, error)
	mustEmbedUnimplementedDrowsinessDetectionServer()
}

// UnimplementedDrowsinessDetectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDrowsinessDetectionServer struct{}

func (UnimplementedDrowsinessDetectionServer) DetectDrowsiness(context.Context, *VideoFrame) (*DetectionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectDrowsiness not implemented")
}
func (UnimplementedDrowsinessDetectionServer) DetectDrowsinessStream(grpc.BidiStreamingServer[VideoFrame, DetectionResult]) error {
	return status.Errorf(codes.Unimplemented, "method DetectDrowsinessStream not implemented")
}
func (UnimplementedDrowsinessDetectionServer) Health(context.Context, *Empty) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedDrowsinessDetectionServer) mustEmbedUnimplementedDrowsinessDetectionServer() {}
func (UnimplementedDrowsinessDetectionServer) testEmbeddedByValue()                             {}

// UnsafeDrowsinessDetectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrowsinessDetectionServer will
// result in compilation errors.
type UnsafeDrowsinessDetectionServer interface {
	mustEmbedUnimplementedDrowsinessDetectionServer()
}

func RegisterDrowsinessDetectionServer(s grpc.ServiceRegistrar, srv DrowsinessDetectionServer) {
	// If the following call pancis, it indicates UnimplementedDrowsinessDetectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DrowsinessDetection_ServiceDesc, srv)
}

func _DrowsinessDetection_DetectDrowsiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrowsinessDetectionServer).DetectDrowsiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrowsinessDetection_DetectDrowsiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrowsinessDetectionServer).DetectDrowsiness(ctx, req.(*VideoFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrowsinessDetection_DetectDrowsinessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DrowsinessDetectionServer).DetectDrowsinessStream(&grpc.GenericServerStream[VideoFrame, DetectionResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DrowsinessDetection_DetectDrowsinessStreamServer = grpc.BidiStreamingServer[VideoFrame, DetectionResult]

func _DrowsinessDetection_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrowsinessDetectionServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DrowsinessDetection_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrowsinessDetectionServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DrowsinessDetection_ServiceDesc is the grpc.ServiceDesc for DrowsinessDetection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrowsinessDetection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drowsiness.DrowsinessDetection",
	HandlerType: (*DrowsinessDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectDrowsiness",
			Handler:    _DrowsinessDetection_DetectDrowsiness_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _DrowsinessDetection_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectDrowsinessStream",
			Handler:       _DrowsinessDetection_DetectDrowsinessStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "drowsiness.proto",
}
