// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: drowsiness.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_drowsiness_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_drowsiness_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_drowsiness_proto_rawDescGZIP(), []int{0}
}

// Видео от клиента
type VideoFrame struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FrameData      []byte                 `protobuf:"bytes,1,opt,name=frame_data,json=frameData,proto3" json:"frame_data,omitempty"`                 // Данные изображения
	Timestamp      int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                 // В миллисекундах
	SequencyNumber int32                  `protobuf:"varint,3,opt,name=sequency_number,json=sequencyNumber,proto3" json:"sequency_number,omitempty"` // Номер кадра
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VideoFrame) Reset() {
	*x = VideoFrame{}
	mi := &file_drowsiness_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoFrame) ProtoMessage() {}

func (x *VideoFrame) ProtoReflect() protoreflect.Message {
	mi := &file_drowsiness_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoFrame.ProtoReflect.Descriptor instead.
func (*VideoFrame) Descriptor() ([]byte, []int) {
	return file_drowsiness_proto_rawDescGZIP(), []int{1}
}

func (x *VideoFrame) GetFrameData() []byte {
	if x != nil {
		return x.FrameData
	}
	return nil
}

func (x *VideoFrame) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VideoFrame) GetSequencyNumber() int32 {
	if x != nil {
		return x.SequencyNumber
	}
	return 0
}

// Результат детектора сонливости
type DetectionResult struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IsDrowsy           bool                   `protobuf:"varint,1,opt,name=is_drowsy,json=isDrowsy,proto3" json:"is_drowsy,omitempty"`                                 // Сонный или нет
	DrowsinnesScore    float32                `protobuf:"fixed32,2,opt,name=drowsinnes_score,json=drowsinnesScore,proto3" json:"drowsinnes_score,omitempty"`           // Оценка сонливости 0.0-1.0
	EyesLookingForward bool                   `protobuf:"varint,3,opt,name=eyes_looking_forward,json=eyesLookingForward,proto3" json:"eyes_looking_forward,omitempty"` // Человек смотрит прямо или нет
	EyeDirectionScore  float32                `protobuf:"fixed32,4,opt,name=eye_direction_score,json=eyeDirectionScore,proto3" json:"eye_direction_score,omitempty"`   // Оценка направления взгляда
	HeadAngle          float32                `protobuf:"fixed32,5,opt,name=head_angle,json=headAngle,proto3" json:"head_angle,omitempty"`                             // Угол наклона головы в градусах
	AlertLevel         string                 `protobuf:"bytes,6,opt,name=alert_level,json=alertLevel,proto3" json:"alert_level,omitempty"`                            // Состояние
	InferenceTimeMs    float32                `protobuf:"fixed32,7,opt,name=inference_time_ms,json=inferenceTimeMs,proto3" json:"inference_time_ms,omitempty"`         // Время обработки
	Timestamp          int64                  `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientTimestamp    int64                  `protobuf:"varint,9,opt,name=client_timestamp,json=clientTimestamp,proto3" json:"client_timestamp,omitempty"`
	SequenceNumber     int32                  `protobuf:"varint,10,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DetectionResult) Reset() {
	*x = DetectionResult{}
	mi := &file_drowsiness_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionResult) ProtoMessage() {}

func (x *DetectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_drowsiness_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionResult.ProtoReflect.Descriptor instead.
func (*DetectionResult) Descriptor() ([]byte, []int) {
	return file_drowsiness_proto_rawDescGZIP(), []int{2}
}

func (x *DetectionResult) GetIsDrowsy() bool {
	if x != nil {
		return x.IsDrowsy
	}
	return false
}

func (x *DetectionResult) GetDrowsinnesScore() float32 {
	if x != nil {
		return x.DrowsinnesScore
	}
	return 0
}

func (x *DetectionResult) GetEyesLookingForward() bool {
	if x != nil {
		return x.EyesLookingForward
	}
	return false
}

func (x *DetectionResult) GetEyeDirectionScore() float32 {
	if x != nil {
		return x.EyeDirectionScore
	}
	return 0
}

func (x *DetectionResult) GetHeadAngle() float32 {
	if x != nil {
		return x.HeadAngle
	}
	return 0
}

func (x *DetectionResult) GetAlertLevel() string {
	if x != nil {
		return x.AlertLevel
	}
	return ""
}

func (x *DetectionResult) GetInferenceTimeMs() float32 {
	if x != nil {
		return x.InferenceTimeMs
	}
	return 0
}

func (x *DetectionResult) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DetectionResult) GetClientTimestamp() int64 {
	if x != nil {
		return x.ClientTimestamp
	}
	return 0
}

func (x *DetectionResult) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// Статус сервиса
type HealthStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	GrpcService   bool                   `protobuf:"varint,2,opt,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"`
	ActiveClients int32                  `protobuf:"varint,3,opt,name=active_clients,json=activeClients,proto3" json:"active_clients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	mi := &file_drowsiness_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_drowsiness_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_drowsiness_proto_rawDescGZIP(), []int{3}
}

func (x *HealthStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthStatus) GetGrpcService() bool {
	if x != nil {
		return x.GrpcService
	}
	return false
}

func (x *HealthStatus) GetActiveClients() int32 {
	if x != nil {
		return x.ActiveClients
	}
	return 0
}

var File_drowsiness_proto protoreflect.FileDescriptor

const file_drowsiness_proto_rawDesc = "" +
	"\n" +
	"\x10drowsiness.proto\x12\n" +
	"drowsiness\"\a\n" +
	"\x05Empty\"r\n" +
	"\n" +
	"VideoFrame\x12\x1d\n" +
	"\n" +
	"frame_data\x18\x01 \x01(\fR\tframeData\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12'\n" +
	"\x0fsequency_number\x18\x03 \x01(\x05R\x0esequencyNumber\"\x99\x03\n" +
	"\x0fDetectionResult\x12\x1b\n" +
	"\tis_drowsy\x18\x01 \x01(\bR\bisDrowsy\x12)\n" +
	"\x10drowsinnes_score\x18\x02 \x01(\x02R\x0fdrowsinnesScore\x120\n" +
	"\x14eyes_looking_forward\x18\x03 \x01(\bR\x12eyesLookingForward\x12.\n" +
	"\x13eye_direction_score\x18\x04 \x01(\x02R\x11eyeDirectionScore\x12\x1d\n" +
	"\n" +
	"head_angle\x18\x05 \x01(\x02R\theadAngle\x12\x1f\n" +
	"\valert_level\x18\x06 \x01(\tR\n" +
	"alertLevel\x12*\n" +
	"\x11inference_time_ms\x18\a \x01(\x02R\x0finferenceTimeMs\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12)\n" +
	"\x10client_timestamp\x18\t \x01(\x03R\x0fclientTimestamp\x12'\n" +
	"\x0fsequence_number\x18\n" +
	" \x01(\x05R\x0esequenceNumber\"p\n" +
	"\fHealthStatus\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12!\n" +
	"\fgrpc_service\x18\x02 \x01(\bR\vgrpcService\x12%\n" +
	"\x0eactive_clients\x18\x03 \x01(\x05R\ractiveClients2\xee\x01\n" +
	"\x13DrowsinessDetection\x12I\n" +
	"\x10DetectDrowsiness\x12\x16.drowsiness.VideoFrame\x1a\x1b.drowsiness.DetectionResult\"\x00\x12S\n" +
	"\x16DetectDrowsinessStream\x12\x16.drowsiness.VideoFrame\x1a\x1b.drowsiness.DetectionResult\"\x00(\x010\x01\x127\n" +
	"\x06Health\x12\x11.drowsiness.Empty\x1a\x18.drowsiness.HealthStatus\"\x00B>Z<https://github.com/brshkins/AI_DETECTOR/go-backend/pkg/pb;pbb\x06proto3"

var (
	file_drowsiness_proto_rawDescOnce sync.Once
	file_drowsiness_proto_rawDescData []byte
)

func file_drowsiness_proto_rawDescGZIP() []byte {
	file_drowsiness_proto_rawDescOnce.Do(func() {
		file_drowsiness_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_drowsiness_proto_rawDesc), len(file_drowsiness_proto_rawDesc)))
	})
	return file_drowsiness_proto_rawDescData
}

var file_drowsiness_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_drowsiness_proto_goTypes = []any{
	(*Empty)(nil),           // 0: drowsiness.Empty
	(*VideoFrame)(nil),      // 1: drowsiness.VideoFrame
	(*DetectionResult)(nil), // 2: drowsiness.DetectionResult
	(*HealthStatus)(nil),    // 3: drowsiness.HealthStatus
}
var file_drowsiness_proto_depIdxs = []int32{
	1, // 0: drowsiness.DrowsinessDetection.DetectDrowsiness:input_type -> drowsiness.VideoFrame
	1, // 1: drowsiness.DrowsinessDetection.DetectDrowsinessStream:input_type -> drowsiness.VideoFrame
	0, // 2: drowsiness.DrowsinessDetection.Health:input_type -> drowsiness.Empty
	2, // 3: drowsiness.DrowsinessDetection.DetectDrowsiness:output_type -> drowsiness.DetectionResult
	2, // 4: drowsiness.DrowsinessDetection.DetectDrowsinessStream:output_type -> drowsiness.DetectionResult
	3, // 5: drowsiness.DrowsinessDetection.Health:output_type -> drowsiness.HealthStatus
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_drowsiness_proto_init() }
func file_drowsiness_proto_init() {
	if File_drowsiness_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_drowsiness_proto_rawDesc), len(file_drowsiness_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_drowsiness_proto_goTypes,
		DependencyIndexes: file_drowsiness_proto_depIdxs,
		MessageInfos:      file_drowsiness_proto_msgTypes,
	}.Build()
	File_drowsiness_proto = out.File
	file_drowsiness_proto_goTypes = nil
	file_drowsiness_proto_depIdxs = nil
}
